use koto_clib::{CallContextInterface, CallResult, Value, ValuesInterface, FAILURE, SUCCESS};

/// WILL BE GENERATED BY MACRO
/// # Safety
#[unsafe(no_mangle)]
pub unsafe extern "C" fn koto_load_extern(values: *mut ValuesInterface) -> CallResult {

    if values.is_null() {
        return CallResult { code: FAILURE, value: 0 };
    }

    let values = unsafe { &mut *values };
    match koto_load(values) {
        Ok(value) => CallResult {
            code: SUCCESS,
            value: value.0,
        },
        Err(err) => {
            let err_str = values.string(&format!("{err}"));
            CallResult { code: FAILURE, value: err_str.0 }
        }
    }
}

fn koto_load(values: &mut ValuesInterface) -> anyhow::Result<Value> {
    let map = values.map()?;
    let msg = values.string("Hello from super_lib!");
    values.map_insert(&map, "message", msg)?;
    let num = values.number(42.0);
    values.map_insert(&map, "number", num)?;
    let add = values.native_function(add_extern);
    values.map_insert(&map, "add", add)?;
    Ok(map)
}

/// WILL BE GENERATED BY MACRO
/// # Safety
#[unsafe(no_mangle)]
unsafe extern "C" fn add_extern(call: *mut CallContextInterface, values: *mut ValuesInterface) -> CallResult {
    if call.is_null() || values.is_null() {
        return CallResult { code: FAILURE, value: 0 };
    }

    let call = unsafe { &mut *call };
    let values = unsafe { &mut *values };
    match add(call, values) {
        Ok(value) => CallResult {
            code: SUCCESS,
            value: value.0,
        },
        Err(err) => {
            let err_str = values.string(&format!("{err}"));
            CallResult { code: FAILURE, value: err_str.0 }
        }
    }
}

fn add(_: &mut CallContextInterface, values: &mut ValuesInterface) -> anyhow::Result<Value> {
    Ok(values.number(5.0 + 10.0))
}